-- File generated by genmodules.sh. Do not modify.
{-# LANGUAGE AllowAmbiguousTypes #-}
{-# LANGUAGE UndecidableInstances #-}

{-# OPTIONS_GHC -Wno-orphans #-}
{-# OPTIONS_HADDOCK not-home #-}

module I.Generated.CInt () where

import Control.Monad
import Data.Bits
import Data.Constraint
import Data.Int
import Data.Maybe
import Data.Proxy
import Data.Type.Ord
import Foreign.C.Types
import KindInteger (type (/=), type (==))
import KindInteger qualified as K
import Prelude hiding (min, max, div)
import Prelude qualified as P

import I.Internal

--------------------------------------------------------------------------------

-- | This is so that GHC doesn't complain about the unused modules,
-- which we import here so that `genmodules.sh` doesn't have to add it
-- to the generated modules.
_ignore :: (CSize, Int)
_ignore = (0, 0)

--------------------------------------------------------------------------------

type instance MinL CInt = MinT CInt
type instance MaxR CInt = MaxT CInt

instance forall (l :: K.Integer) (r :: K.Integer).
  ( IntervalCtx CInt l r
  ) => Interval CInt l r where
  type IntervalCtx CInt l r =
    ( K.KnownInteger l
    , K.KnownInteger r
    , MinT CInt <= l
    , l <= r
    , r <= MaxT CInt )
  type MinI CInt l r = l
  type MaxI CInt l r = r

instance
  ( Interval CInt l r, InhabitedCtx CInt l r
  ) => Inhabited CInt l r where
  inhabitant = min
  from x | K.SomeInteger (_ :: Proxy t) <- K.someIntegerVal (toInteger x) = do
    Dict <- leInteger @l @t
    Dict <- leInteger @t @r
    pure (UnsafeI x)
  negate' x = from =<< toIntegralSized (P.negate (toInteger (unwrap x)))
  a `plus'` b = from =<< toIntegralSized (toInteger (unwrap a) +
                                          toInteger (unwrap b))
  a `mult'` b = from =<< toIntegralSized (toInteger (unwrap a) *
                                          toInteger (unwrap b))
  a `minus'` b = from =<< toIntegralSized (toInteger (unwrap a) -
                                           toInteger (unwrap b))
  a `div'` b = do guard (unwrap b /= 0)
                  (q, 0) <- pure $ divMod (unwrap a) (unwrap b)
                  from q

instance forall t l r.
  ( Inhabited CInt l r, KnownCtx CInt t l r
  ) => Known CInt t l r where
  type KnownCtx CInt t l r = (K.KnownInteger t, l <= t, t <= r)
  known = UnsafeI (fromInteger (K.integerVal (Proxy @t)))

instance forall l r. (Inhabited CInt l r) => With CInt l r where
  with x g
    | K.SomeInteger (pt :: Proxy t) <- K.someIntegerVal (toInteger (unwrap x))
    = fromMaybe (error "I.with: impossible") $ do
        Dict <- leInteger @l @t
        Dict <- leInteger @t @r
        pure (g pt)

instance (Inhabited CInt l r, l /= r) => Discrete CInt l r where
  pred' i = UnsafeI (unwrap i - 1) <$ guard (min < i)
  succ' i = UnsafeI (unwrap i + 1) <$ guard (i < max)

instance (Zero CInt l r, l == K.Negate r) => Negate CInt l r where
  negate = UnsafeI . P.negate . unwrap

instance (Inhabited CInt l r, l <= K.P 0, K.P 0 <= r) => Zero CInt l r where
  zero = UnsafeI 0

instance (Inhabited CInt l r, l <= K.P 1, K.P 1 <= r) => One CInt l r where
  one = UnsafeI 1

